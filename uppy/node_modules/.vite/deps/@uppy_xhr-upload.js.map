{
  "version": 3,
  "sources": ["../../@uppy/utils/lib/ProgressTimeout.js", "../../@uppy/xhr-upload/lib/locale.js", "../../@uppy/xhr-upload/lib/index.js"],
  "sourcesContent": ["function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\nvar id = 0;\nfunction _classPrivateFieldLooseKey(name) { return \"__private_\" + id++ + \"_\" + name; }\nvar _aliveTimer = /*#__PURE__*/_classPrivateFieldLooseKey(\"aliveTimer\");\nvar _isDone = /*#__PURE__*/_classPrivateFieldLooseKey(\"isDone\");\nvar _onTimedOut = /*#__PURE__*/_classPrivateFieldLooseKey(\"onTimedOut\");\nvar _timeout = /*#__PURE__*/_classPrivateFieldLooseKey(\"timeout\");\n/**\n * Helper to abort upload requests if there has not been any progress for `timeout` ms.\n * Create an instance using `timer = new ProgressTimeout(10000, onTimeout)`\n * Call `timer.progress()` to signal that there has been progress of any kind.\n * Call `timer.done()` when the upload has completed.\n */\nclass ProgressTimeout {\n  constructor(timeout, timeoutHandler) {\n    Object.defineProperty(this, _aliveTimer, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _isDone, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _onTimedOut, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _timeout, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _timeout)[_timeout] = timeout;\n    _classPrivateFieldLooseBase(this, _onTimedOut)[_onTimedOut] = timeoutHandler;\n  }\n  progress() {\n    // Some browsers fire another progress event when the upload is\n    // cancelled, so we have to ignore progress after the timer was\n    // told to stop.\n    if (_classPrivateFieldLooseBase(this, _isDone)[_isDone]) return;\n    if (_classPrivateFieldLooseBase(this, _timeout)[_timeout] > 0) {\n      clearTimeout(_classPrivateFieldLooseBase(this, _aliveTimer)[_aliveTimer]);\n      _classPrivateFieldLooseBase(this, _aliveTimer)[_aliveTimer] = setTimeout(_classPrivateFieldLooseBase(this, _onTimedOut)[_onTimedOut], _classPrivateFieldLooseBase(this, _timeout)[_timeout]);\n    }\n  }\n  done() {\n    if (!_classPrivateFieldLooseBase(this, _isDone)[_isDone]) {\n      clearTimeout(_classPrivateFieldLooseBase(this, _aliveTimer)[_aliveTimer]);\n      _classPrivateFieldLooseBase(this, _aliveTimer)[_aliveTimer] = null;\n      _classPrivateFieldLooseBase(this, _isDone)[_isDone] = true;\n    }\n  }\n}\nexport default ProgressTimeout;", "export default {\n  strings: {\n    // Shown in the Informer if an upload is being canceled because it stalled for too long.\n    uploadStalled: 'Upload has not made any progress for %{seconds} seconds. You may want to retry it.'\n  }\n};", "function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\nvar id = 0;\nfunction _classPrivateFieldLooseKey(name) { return \"__private_\" + id++ + \"_\" + name; }\nimport UploaderPlugin from '@uppy/core/lib/UploaderPlugin.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { Provider, RequestClient, Socket } from '@uppy/companion-client';\nimport emitSocketProgress from '@uppy/utils/lib/emitSocketProgress';\nimport getSocketHost from '@uppy/utils/lib/getSocketHost';\nimport EventManager from '@uppy/utils/lib/EventManager';\nimport ProgressTimeout from '@uppy/utils/lib/ProgressTimeout';\nimport { RateLimitedQueue, internalRateLimitedQueue } from '@uppy/utils/lib/RateLimitedQueue';\nimport NetworkError from '@uppy/utils/lib/NetworkError';\nimport isNetworkError from '@uppy/utils/lib/isNetworkError';\nimport { filterNonFailedFiles, filterFilesToEmitUploadStarted } from '@uppy/utils/lib/fileFilters';\nconst packageJson = {\n  \"version\": \"3.3.2\"\n};\nimport locale from './locale.js';\nfunction buildResponseError(xhr, err) {\n  let error = err;\n  // No error message\n  if (!error) error = new Error('Upload error');\n  // Got an error message string\n  if (typeof error === 'string') error = new Error(error);\n  // Got something else\n  if (!(error instanceof Error)) {\n    error = Object.assign(new Error('Upload error'), {\n      data: error\n    });\n  }\n  if (isNetworkError(xhr)) {\n    error = new NetworkError(error, xhr);\n    return error;\n  }\n  error.request = xhr;\n  return error;\n}\n\n/**\n * Set `data.type` in the blob to `file.meta.type`,\n * because we might have detected a more accurate file type in Uppy\n * https://stackoverflow.com/a/50875615\n *\n * @param {object} file File object with `data`, `size` and `meta` properties\n * @returns {object} blob updated with the new `type` set from `file.meta.type`\n */\nfunction setTypeInBlob(file) {\n  const dataWithUpdatedType = file.data.slice(0, file.data.size, file.meta.type);\n  return dataWithUpdatedType;\n}\nvar _upload = /*#__PURE__*/_classPrivateFieldLooseKey(\"upload\");\nvar _requestSocketToken = /*#__PURE__*/_classPrivateFieldLooseKey(\"requestSocketToken\");\nvar _uploadBundle = /*#__PURE__*/_classPrivateFieldLooseKey(\"uploadBundle\");\nvar _uploadFiles = /*#__PURE__*/_classPrivateFieldLooseKey(\"uploadFiles\");\nvar _handleUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"handleUpload\");\nexport default class XHRUpload extends UploaderPlugin {\n  constructor(uppy, _opts) {\n    super(uppy, _opts);\n    Object.defineProperty(this, _uploadFiles, {\n      value: _uploadFiles2\n    });\n    Object.defineProperty(this, _uploadBundle, {\n      value: _uploadBundle2\n    });\n    Object.defineProperty(this, _upload, {\n      value: _upload2\n    });\n    Object.defineProperty(this, _requestSocketToken, {\n      writable: true,\n      value: async (file, options) => {\n        const opts = this.getOptions(file);\n        const Client = file.remote.providerOptions.provider ? Provider : RequestClient;\n        const client = new Client(this.uppy, file.remote.providerOptions);\n        const allowedMetaFields = Array.isArray(opts.allowedMetaFields) ? opts.allowedMetaFields\n        // Send along all fields by default.\n        : Object.keys(file.meta);\n        const res = await client.post(file.remote.url, {\n          ...file.remote.body,\n          protocol: 'multipart',\n          endpoint: opts.endpoint,\n          size: file.data.size,\n          fieldname: opts.fieldName,\n          metadata: Object.fromEntries(allowedMetaFields.map(name => [name, file.meta[name]])),\n          httpMethod: opts.method,\n          useFormData: opts.formData,\n          headers: typeof opts.headers === 'function' ? opts.headers(file) : opts.headers\n        }, options);\n        return res.token;\n      }\n    });\n    Object.defineProperty(this, _handleUpload, {\n      writable: true,\n      value: async fileIDs => {\n        if (fileIDs.length === 0) {\n          this.uppy.log('[XHRUpload] No files to upload!');\n          return;\n        }\n\n        // No limit configured by the user, and no RateLimitedQueue passed in by a \"parent\" plugin\n        // (basically just AwsS3) using the internal symbol\n        if (this.opts.limit === 0 && !this.opts[internalRateLimitedQueue]) {\n          this.uppy.log('[XHRUpload] When uploading multiple files at once, consider setting the `limit` option (to `10` for example), to limit the number of concurrent uploads, which helps prevent memory and network issues: https://uppy.io/docs/xhr-upload/#limit-0', 'warning');\n        }\n        this.uppy.log('[XHRUpload] Uploading...');\n        const files = this.uppy.getFilesByIds(fileIDs);\n        const filesFiltered = filterNonFailedFiles(files);\n        const filesToEmit = filterFilesToEmitUploadStarted(filesFiltered);\n        this.uppy.emit('upload-start', filesToEmit);\n        if (this.opts.bundle) {\n          // if bundle: true, we don’t support remote uploads\n          const isSomeFileRemote = filesFiltered.some(file => file.isRemote);\n          if (isSomeFileRemote) {\n            throw new Error('Can’t upload remote files when the `bundle: true` option is set');\n          }\n          if (typeof this.opts.headers === 'function') {\n            throw new TypeError('`headers` may not be a function when the `bundle: true` option is set');\n          }\n          await _classPrivateFieldLooseBase(this, _uploadBundle)[_uploadBundle](filesFiltered);\n        } else {\n          await _classPrivateFieldLooseBase(this, _uploadFiles)[_uploadFiles](filesFiltered);\n        }\n      }\n    });\n    this.type = 'uploader';\n    this.id = this.opts.id || 'XHRUpload';\n    this.title = 'XHRUpload';\n    this.defaultLocale = locale;\n\n    // Default options\n    const defaultOptions = {\n      formData: true,\n      fieldName: _opts.bundle ? 'files[]' : 'file',\n      method: 'POST',\n      allowedMetaFields: null,\n      responseUrlFieldName: 'url',\n      bundle: false,\n      headers: {},\n      timeout: 30 * 1000,\n      limit: 5,\n      withCredentials: false,\n      responseType: '',\n      /**\n       * @param {string} responseText the response body string\n       */\n      getResponseData(responseText) {\n        let parsedResponse = {};\n        try {\n          parsedResponse = JSON.parse(responseText);\n        } catch (err) {\n          uppy.log(err);\n        }\n        return parsedResponse;\n      },\n      /**\n       *\n       * @param {string} _ the response body string\n       * @param {XMLHttpRequest | respObj} response the response object (XHR or similar)\n       */\n      getResponseError(_, response) {\n        let error = new Error('Upload error');\n        if (isNetworkError(response)) {\n          error = new NetworkError(error, response);\n        }\n        return error;\n      },\n      /**\n       * Check if the response from the upload endpoint indicates that the upload was successful.\n       *\n       * @param {number} status the response status code\n       */\n      validateStatus(status) {\n        return status >= 200 && status < 300;\n      }\n    };\n    this.opts = {\n      ...defaultOptions,\n      ..._opts\n    };\n    this.i18nInit();\n\n    // Simultaneous upload limiting is shared across all uploads with this plugin.\n    if (internalRateLimitedQueue in this.opts) {\n      this.requests = this.opts[internalRateLimitedQueue];\n    } else {\n      this.requests = new RateLimitedQueue(this.opts.limit);\n    }\n    if (this.opts.bundle && !this.opts.formData) {\n      throw new Error('`opts.formData` must be true when `opts.bundle` is enabled.');\n    }\n    if ((_opts == null ? void 0 : _opts.allowedMetaFields) === undefined && 'metaFields' in this.opts) {\n      throw new Error('The `metaFields` option has been renamed to `allowedMetaFields`.');\n    }\n    this.uploaderEvents = Object.create(null);\n    this.setQueueRequestSocketToken(this.requests.wrapPromiseFunction(_classPrivateFieldLooseBase(this, _requestSocketToken)[_requestSocketToken], {\n      priority: -1\n    }));\n  }\n  getOptions(file) {\n    const overrides = this.uppy.getState().xhrUpload;\n    const {\n      headers\n    } = this.opts;\n    const opts = {\n      ...this.opts,\n      ...(overrides || {}),\n      ...(file.xhrUpload || {}),\n      headers: {}\n    };\n    // Support for `headers` as a function, only in the XHRUpload settings.\n    // Options set by other plugins in Uppy state or on the files themselves are still merged in afterward.\n    //\n    // ```js\n    // headers: (file) => ({ expires: file.meta.expires })\n    // ```\n    if (typeof headers === 'function') {\n      opts.headers = headers(file);\n    } else {\n      Object.assign(opts.headers, this.opts.headers);\n    }\n    if (overrides) {\n      Object.assign(opts.headers, overrides.headers);\n    }\n    if (file.xhrUpload) {\n      Object.assign(opts.headers, file.xhrUpload.headers);\n    }\n    return opts;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addMetadata(formData, meta, opts) {\n    const allowedMetaFields = Array.isArray(opts.allowedMetaFields) ? opts.allowedMetaFields : Object.keys(meta); // Send along all fields by default.\n\n    allowedMetaFields.forEach(item => {\n      if (Array.isArray(meta[item])) {\n        // In this case we don't transform `item` to add brackets, it's up to\n        // the user to add the brackets so it won't be overridden.\n        meta[item].forEach(subItem => formData.append(item, subItem));\n      } else {\n        formData.append(item, meta[item]);\n      }\n    });\n  }\n  createFormDataUpload(file, opts) {\n    const formPost = new FormData();\n    this.addMetadata(formPost, file.meta, opts);\n    const dataWithUpdatedType = setTypeInBlob(file);\n    if (file.name) {\n      formPost.append(opts.fieldName, dataWithUpdatedType, file.meta.name);\n    } else {\n      formPost.append(opts.fieldName, dataWithUpdatedType);\n    }\n    return formPost;\n  }\n  createBundledUpload(files, opts) {\n    const formPost = new FormData();\n    const {\n      meta\n    } = this.uppy.getState();\n    this.addMetadata(formPost, meta, opts);\n    files.forEach(file => {\n      const options = this.getOptions(file);\n      const dataWithUpdatedType = setTypeInBlob(file);\n      if (file.name) {\n        formPost.append(options.fieldName, dataWithUpdatedType, file.name);\n      } else {\n        formPost.append(options.fieldName, dataWithUpdatedType);\n      }\n    });\n    return formPost;\n  }\n  async connectToServerSocket(file) {\n    return new Promise((resolve, reject) => {\n      const opts = this.getOptions(file);\n      const token = file.serverToken;\n      const host = getSocketHost(file.remote.companionUrl);\n      let socket;\n      const createSocket = () => {\n        if (socket != null) return;\n        socket = new Socket({\n          target: `${host}/api/${token}`\n        });\n        socket.on('progress', progressData => emitSocketProgress(this, progressData, file));\n        socket.on('success', data => {\n          const body = opts.getResponseData(data.response.responseText, data.response);\n          const uploadURL = body[opts.responseUrlFieldName];\n          const uploadResp = {\n            status: data.response.status,\n            body,\n            uploadURL\n          };\n          this.uppy.emit('upload-success', file, uploadResp);\n          queuedRequest.done(); // eslint-disable-line no-use-before-define\n          socket.close();\n          if (this.uploaderEvents[file.id]) {\n            this.uploaderEvents[file.id].remove();\n            this.uploaderEvents[file.id] = null;\n          }\n          return resolve();\n        });\n        socket.on('error', errData => {\n          const resp = errData.response;\n          const error = resp ? opts.getResponseError(resp.responseText, resp) : Object.assign(new Error(errData.error.message), {\n            cause: errData.error\n          });\n          this.uppy.emit('upload-error', file, error);\n          queuedRequest.done(); // eslint-disable-line no-use-before-define\n          socket.close();\n          if (this.uploaderEvents[file.id]) {\n            this.uploaderEvents[file.id].remove();\n            this.uploaderEvents[file.id] = null;\n          }\n          reject(error);\n        });\n      };\n      this.uploaderEvents[file.id] = new EventManager(this.uppy);\n      let queuedRequest = this.requests.run(() => {\n        if (file.isPaused) {\n          var _socket;\n          (_socket = socket) == null ? void 0 : _socket.send('pause', {});\n        } else {\n          createSocket();\n        }\n        return () => {};\n      });\n      this.onFileRemove(file.id, () => {\n        var _socket2;\n        (_socket2 = socket) == null ? void 0 : _socket2.send('cancel', {});\n        socket.close();\n        queuedRequest.abort();\n        resolve(`upload ${file.id} was removed`);\n      });\n      this.onCancelAll(file.id, function (_temp) {\n        let {\n          reason\n        } = _temp === void 0 ? {} : _temp;\n        if (reason === 'user') {\n          var _socket3;\n          (_socket3 = socket) == null ? void 0 : _socket3.send('cancel', {});\n          queuedRequest.abort();\n          // socket.close()\n        }\n\n        resolve(`upload ${file.id} was canceled`);\n      });\n      const onRetryRequest = () => {\n        if (socket == null) {\n          queuedRequest.abort();\n        } else {\n          queuedRequest.done();\n        }\n        queuedRequest = this.requests.run(() => {\n          if (socket == null) {\n            createSocket();\n          }\n          return () => {};\n        });\n      };\n      this.onRetry(file.id, onRetryRequest);\n      this.onRetryAll(file.id, onRetryRequest);\n    }).catch(err => {\n      this.uppy.emit('upload-error', file, err);\n      return Promise.reject(err);\n    });\n  }\n  onFileRemove(fileID, cb) {\n    this.uploaderEvents[fileID].on('file-removed', file => {\n      if (fileID === file.id) cb(file.id);\n    });\n  }\n  onRetry(fileID, cb) {\n    this.uploaderEvents[fileID].on('upload-retry', targetFileID => {\n      if (fileID === targetFileID) {\n        cb();\n      }\n    });\n  }\n  onRetryAll(fileID, cb) {\n    this.uploaderEvents[fileID].on('retry-all', () => {\n      if (!this.uppy.getFile(fileID)) return;\n      cb();\n    });\n  }\n  onCancelAll(fileID, eventHandler) {\n    var _this = this;\n    this.uploaderEvents[fileID].on('cancel-all', function () {\n      if (!_this.uppy.getFile(fileID)) return;\n      eventHandler(...arguments);\n    });\n  }\n  install() {\n    if (this.opts.bundle) {\n      const {\n        capabilities\n      } = this.uppy.getState();\n      this.uppy.setState({\n        capabilities: {\n          ...capabilities,\n          individualCancellation: false\n        }\n      });\n    }\n    this.uppy.addUploader(_classPrivateFieldLooseBase(this, _handleUpload)[_handleUpload]);\n  }\n  uninstall() {\n    if (this.opts.bundle) {\n      const {\n        capabilities\n      } = this.uppy.getState();\n      this.uppy.setState({\n        capabilities: {\n          ...capabilities,\n          individualCancellation: true\n        }\n      });\n    }\n    this.uppy.removeUploader(_classPrivateFieldLooseBase(this, _handleUpload)[_handleUpload]);\n  }\n}\nasync function _upload2(file, current, total) {\n  const opts = this.getOptions(file);\n  this.uppy.log(`uploading ${current} of ${total}`);\n  return new Promise((resolve, reject) => {\n    const data = opts.formData ? this.createFormDataUpload(file, opts) : file.data;\n    const xhr = new XMLHttpRequest();\n    this.uploaderEvents[file.id] = new EventManager(this.uppy);\n    let queuedRequest;\n    const timer = new ProgressTimeout(opts.timeout, () => {\n      const error = new Error(this.i18n('uploadStalled', {\n        seconds: Math.ceil(opts.timeout / 1000)\n      }));\n      this.uppy.emit('upload-stalled', error, [file]);\n    });\n    const id = nanoid();\n    xhr.upload.addEventListener('loadstart', () => {\n      this.uppy.log(`[XHRUpload] ${id} started`);\n    });\n    xhr.upload.addEventListener('progress', ev => {\n      this.uppy.log(`[XHRUpload] ${id} progress: ${ev.loaded} / ${ev.total}`);\n      // Begin checking for timeouts when progress starts, instead of loading,\n      // to avoid timing out requests on browser concurrency queue\n      timer.progress();\n      if (ev.lengthComputable) {\n        this.uppy.emit('upload-progress', file, {\n          uploader: this,\n          bytesUploaded: ev.loaded,\n          bytesTotal: ev.total\n        });\n      }\n    });\n    xhr.addEventListener('load', () => {\n      this.uppy.log(`[XHRUpload] ${id} finished`);\n      timer.done();\n      queuedRequest.done();\n      if (this.uploaderEvents[file.id]) {\n        this.uploaderEvents[file.id].remove();\n        this.uploaderEvents[file.id] = null;\n      }\n      if (opts.validateStatus(xhr.status, xhr.responseText, xhr)) {\n        const body = opts.getResponseData(xhr.responseText, xhr);\n        const uploadURL = body[opts.responseUrlFieldName];\n        const uploadResp = {\n          status: xhr.status,\n          body,\n          uploadURL\n        };\n        this.uppy.emit('upload-success', file, uploadResp);\n        if (uploadURL) {\n          this.uppy.log(`Download ${file.name} from ${uploadURL}`);\n        }\n        return resolve(file);\n      }\n      const body = opts.getResponseData(xhr.responseText, xhr);\n      const error = buildResponseError(xhr, opts.getResponseError(xhr.responseText, xhr));\n      const response = {\n        status: xhr.status,\n        body\n      };\n      this.uppy.emit('upload-error', file, error, response);\n      return reject(error);\n    });\n    xhr.addEventListener('error', () => {\n      this.uppy.log(`[XHRUpload] ${id} errored`);\n      timer.done();\n      queuedRequest.done();\n      if (this.uploaderEvents[file.id]) {\n        this.uploaderEvents[file.id].remove();\n        this.uploaderEvents[file.id] = null;\n      }\n      const error = buildResponseError(xhr, opts.getResponseError(xhr.responseText, xhr));\n      this.uppy.emit('upload-error', file, error);\n      return reject(error);\n    });\n    xhr.open(opts.method.toUpperCase(), opts.endpoint, true);\n    // IE10 does not allow setting `withCredentials` and `responseType`\n    // before `open()` is called.\n    xhr.withCredentials = opts.withCredentials;\n    if (opts.responseType !== '') {\n      xhr.responseType = opts.responseType;\n    }\n    queuedRequest = this.requests.run(() => {\n      // When using an authentication system like JWT, the bearer token goes as a header. This\n      // header needs to be fresh each time the token is refreshed so computing and setting the\n      // headers just before the upload starts enables this kind of authentication to work properly.\n      // Otherwise, half-way through the list of uploads the token could be stale and the upload would fail.\n      const currentOpts = this.getOptions(file);\n      Object.keys(currentOpts.headers).forEach(header => {\n        xhr.setRequestHeader(header, currentOpts.headers[header]);\n      });\n      xhr.send(data);\n      return () => {\n        timer.done();\n        xhr.abort();\n      };\n    });\n    this.onFileRemove(file.id, () => {\n      queuedRequest.abort();\n      reject(new Error('File removed'));\n    });\n    this.onCancelAll(file.id, _ref => {\n      let {\n        reason\n      } = _ref;\n      if (reason === 'user') {\n        queuedRequest.abort();\n      }\n      reject(new Error('Upload cancelled'));\n    });\n  });\n}\nfunction _uploadBundle2(files) {\n  return new Promise((resolve, reject) => {\n    const {\n      endpoint\n    } = this.opts;\n    const {\n      method\n    } = this.opts;\n    const optsFromState = this.uppy.getState().xhrUpload;\n    const formData = this.createBundledUpload(files, {\n      ...this.opts,\n      ...(optsFromState || {})\n    });\n    const xhr = new XMLHttpRequest();\n    const emitError = error => {\n      files.forEach(file => {\n        this.uppy.emit('upload-error', file, error);\n      });\n    };\n    const timer = new ProgressTimeout(this.opts.timeout, () => {\n      const error = new Error(this.i18n('uploadStalled', {\n        seconds: Math.ceil(this.opts.timeout / 1000)\n      }));\n      this.uppy.emit('upload-stalled', error, files);\n    });\n    xhr.upload.addEventListener('loadstart', () => {\n      this.uppy.log('[XHRUpload] started uploading bundle');\n      timer.progress();\n    });\n    xhr.upload.addEventListener('progress', ev => {\n      timer.progress();\n      if (!ev.lengthComputable) return;\n      files.forEach(file => {\n        this.uppy.emit('upload-progress', file, {\n          uploader: this,\n          bytesUploaded: ev.loaded / ev.total * file.size,\n          bytesTotal: file.size\n        });\n      });\n    });\n    xhr.addEventListener('load', ev => {\n      timer.done();\n      if (this.opts.validateStatus(ev.target.status, xhr.responseText, xhr)) {\n        const body = this.opts.getResponseData(xhr.responseText, xhr);\n        const uploadResp = {\n          status: ev.target.status,\n          body\n        };\n        files.forEach(file => {\n          this.uppy.emit('upload-success', file, uploadResp);\n        });\n        return resolve();\n      }\n      const error = this.opts.getResponseError(xhr.responseText, xhr) || new Error('Upload error');\n      error.request = xhr;\n      emitError(error);\n      return reject(error);\n    });\n    xhr.addEventListener('error', () => {\n      timer.done();\n      const error = this.opts.getResponseError(xhr.responseText, xhr) || new Error('Upload error');\n      emitError(error);\n      return reject(error);\n    });\n    this.uppy.on('cancel-all', function (_temp2) {\n      let {\n        reason\n      } = _temp2 === void 0 ? {} : _temp2;\n      if (reason !== 'user') return;\n      timer.done();\n      xhr.abort();\n    });\n    xhr.open(method.toUpperCase(), endpoint, true);\n    // IE10 does not allow setting `withCredentials` and `responseType`\n    // before `open()` is called.\n    xhr.withCredentials = this.opts.withCredentials;\n    if (this.opts.responseType !== '') {\n      xhr.responseType = this.opts.responseType;\n    }\n    Object.keys(this.opts.headers).forEach(header => {\n      xhr.setRequestHeader(header, this.opts.headers[header]);\n    });\n    xhr.send(formData);\n  });\n}\nasync function _uploadFiles2(files) {\n  await Promise.allSettled(files.map((file, i) => {\n    const current = parseInt(i, 10) + 1;\n    const total = files.length;\n    if (file.isRemote) {\n      const controller = new AbortController();\n      const removedHandler = removedFile => {\n        if (removedFile.id === file.id) controller.abort();\n      };\n      this.uppy.on('file-removed', removedHandler);\n      const uploadPromise = this.uploadRemoteFile(file, {\n        signal: controller.signal\n      });\n      this.requests.wrapSyncFunction(() => {\n        this.uppy.off('file-removed', removedHandler);\n      }, {\n        priority: -1\n      })();\n      return uploadPromise;\n    }\n    return _classPrivateFieldLooseBase(this, _upload)[_upload](file, current, total);\n  }));\n}\n// eslint-disable-next-line global-require\nXHRUpload.VERSION = packageJson.version;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,4BAA4B,UAAU,YAAY;AAAE,MAAI,CAAC,OAAO,UAAU,eAAe,KAAK,UAAU,UAAU,GAAG;AAAE,UAAM,IAAI,UAAU,gDAAgD;AAAA,EAAG;AAAE,SAAO;AAAU;AAC1N,IAAI,KAAK;AACT,SAAS,2BAA2B,MAAM;AAAE,SAAO,eAAe,OAAO,MAAM;AAAM;AACrF,IAAI,cAA2B,2BAA2B,YAAY;AACtE,IAAI,UAAuB,2BAA2B,QAAQ;AAC9D,IAAI,cAA2B,2BAA2B,YAAY;AACtE,IAAI,WAAwB,2BAA2B,SAAS;AAOhE,IAAM,kBAAN,MAAsB;AAAA,EACpB,YAAY,SAAS,gBAAgB;AACnC,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,SAAS;AAAA,MACnC,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,UAAU;AAAA,MACpC,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,gCAA4B,MAAM,QAAQ,EAAE,QAAQ,IAAI;AACxD,gCAA4B,MAAM,WAAW,EAAE,WAAW,IAAI;AAAA,EAChE;AAAA,EACA,WAAW;AAIT,QAAI,4BAA4B,MAAM,OAAO,EAAE,OAAO;AAAG;AACzD,QAAI,4BAA4B,MAAM,QAAQ,EAAE,QAAQ,IAAI,GAAG;AAC7D,mBAAa,4BAA4B,MAAM,WAAW,EAAE,WAAW,CAAC;AACxE,kCAA4B,MAAM,WAAW,EAAE,WAAW,IAAI,WAAW,4BAA4B,MAAM,WAAW,EAAE,WAAW,GAAG,4BAA4B,MAAM,QAAQ,EAAE,QAAQ,CAAC;AAAA,IAC7L;AAAA,EACF;AAAA,EACA,OAAO;AACL,QAAI,CAAC,4BAA4B,MAAM,OAAO,EAAE,OAAO,GAAG;AACxD,mBAAa,4BAA4B,MAAM,WAAW,EAAE,WAAW,CAAC;AACxE,kCAA4B,MAAM,WAAW,EAAE,WAAW,IAAI;AAC9D,kCAA4B,MAAM,OAAO,EAAE,OAAO,IAAI;AAAA,IACxD;AAAA,EACF;AACF;AACA,IAAO,0BAAQ;;;ACpDf,IAAO,iBAAQ;AAAA,EACb,SAAS;AAAA;AAAA,IAEP,eAAe;AAAA,EACjB;AACF;;;ACLA,SAASA,6BAA4B,UAAU,YAAY;AAAE,MAAI,CAAC,OAAO,UAAU,eAAe,KAAK,UAAU,UAAU,GAAG;AAAE,UAAM,IAAI,UAAU,gDAAgD;AAAA,EAAG;AAAE,SAAO;AAAU;AAC1N,IAAIC,MAAK;AACT,SAASC,4BAA2B,MAAM;AAAE,SAAO,eAAeD,QAAO,MAAM;AAAM;AAYrF,IAAM,cAAc;AAAA,EAClB,WAAW;AACb;AAEA,SAAS,mBAAmB,KAAK,KAAK;AACpC,MAAI,QAAQ;AAEZ,MAAI,CAAC;AAAO,YAAQ,IAAI,MAAM,cAAc;AAE5C,MAAI,OAAO,UAAU;AAAU,YAAQ,IAAI,MAAM,KAAK;AAEtD,MAAI,EAAE,iBAAiB,QAAQ;AAC7B,YAAQ,OAAO,OAAO,IAAI,MAAM,cAAc,GAAG;AAAA,MAC/C,MAAM;AAAA,IACR,CAAC;AAAA,EACH;AACA,MAAI,uBAAe,GAAG,GAAG;AACvB,YAAQ,IAAI,qBAAa,OAAO,GAAG;AACnC,WAAO;AAAA,EACT;AACA,QAAM,UAAU;AAChB,SAAO;AACT;AAUA,SAAS,cAAc,MAAM;AAC3B,QAAM,sBAAsB,KAAK,KAAK,MAAM,GAAG,KAAK,KAAK,MAAM,KAAK,KAAK,IAAI;AAC7E,SAAO;AACT;AACA,IAAI,UAAuBC,4BAA2B,QAAQ;AAC9D,IAAI,sBAAmCA,4BAA2B,oBAAoB;AACtF,IAAI,gBAA6BA,4BAA2B,cAAc;AAC1E,IAAI,eAA4BA,4BAA2B,aAAa;AACxE,IAAI,gBAA6BA,4BAA2B,cAAc;AAC1E,IAAqB,YAArB,cAAuC,eAAe;AAAA,EACpD,YAAY,MAAM,OAAO;AACvB,UAAM,MAAM,KAAK;AACjB,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,eAAe;AAAA,MACzC,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,SAAS;AAAA,MACnC,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,qBAAqB;AAAA,MAC/C,UAAU;AAAA,MACV,OAAO,OAAO,MAAM,YAAY;AAC9B,cAAM,OAAO,KAAK,WAAW,IAAI;AACjC,cAAM,SAAS,KAAK,OAAO,gBAAgB,WAAW,WAAW;AACjE,cAAM,SAAS,IAAI,OAAO,KAAK,MAAM,KAAK,OAAO,eAAe;AAChE,cAAM,oBAAoB,MAAM,QAAQ,KAAK,iBAAiB,IAAI,KAAK,oBAErE,OAAO,KAAK,KAAK,IAAI;AACvB,cAAM,MAAM,MAAM,OAAO,KAAK,KAAK,OAAO,KAAK;AAAA,UAC7C,GAAG,KAAK,OAAO;AAAA,UACf,UAAU;AAAA,UACV,UAAU,KAAK;AAAA,UACf,MAAM,KAAK,KAAK;AAAA,UAChB,WAAW,KAAK;AAAA,UAChB,UAAU,OAAO,YAAY,kBAAkB,IAAI,UAAQ,CAAC,MAAM,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;AAAA,UACnF,YAAY,KAAK;AAAA,UACjB,aAAa,KAAK;AAAA,UAClB,SAAS,OAAO,KAAK,YAAY,aAAa,KAAK,QAAQ,IAAI,IAAI,KAAK;AAAA,QAC1E,GAAG,OAAO;AACV,eAAO,IAAI;AAAA,MACb;AAAA,IACF,CAAC;AACD,WAAO,eAAe,MAAM,eAAe;AAAA,MACzC,UAAU;AAAA,MACV,OAAO,OAAM,YAAW;AACtB,YAAI,QAAQ,WAAW,GAAG;AACxB,eAAK,KAAK,IAAI,iCAAiC;AAC/C;AAAA,QACF;AAIA,YAAI,KAAK,KAAK,UAAU,KAAK,CAAC,KAAK,KAAK,wBAAwB,GAAG;AACjE,eAAK,KAAK,IAAI,oPAAoP,SAAS;AAAA,QAC7Q;AACA,aAAK,KAAK,IAAI,0BAA0B;AACxC,cAAM,QAAQ,KAAK,KAAK,cAAc,OAAO;AAC7C,cAAM,gBAAgB,qBAAqB,KAAK;AAChD,cAAM,cAAc,+BAA+B,aAAa;AAChE,aAAK,KAAK,KAAK,gBAAgB,WAAW;AAC1C,YAAI,KAAK,KAAK,QAAQ;AAEpB,gBAAM,mBAAmB,cAAc,KAAK,UAAQ,KAAK,QAAQ;AACjE,cAAI,kBAAkB;AACpB,kBAAM,IAAI,MAAM,iEAAiE;AAAA,UACnF;AACA,cAAI,OAAO,KAAK,KAAK,YAAY,YAAY;AAC3C,kBAAM,IAAI,UAAU,uEAAuE;AAAA,UAC7F;AACA,gBAAMF,6BAA4B,MAAM,aAAa,EAAE,aAAa,EAAE,aAAa;AAAA,QACrF,OAAO;AACL,gBAAMA,6BAA4B,MAAM,YAAY,EAAE,YAAY,EAAE,aAAa;AAAA,QACnF;AAAA,MACF;AAAA,IACF,CAAC;AACD,SAAK,OAAO;AACZ,SAAK,KAAK,KAAK,KAAK,MAAM;AAC1B,SAAK,QAAQ;AACb,SAAK,gBAAgB;AAGrB,UAAM,iBAAiB;AAAA,MACrB,UAAU;AAAA,MACV,WAAW,MAAM,SAAS,YAAY;AAAA,MACtC,QAAQ;AAAA,MACR,mBAAmB;AAAA,MACnB,sBAAsB;AAAA,MACtB,QAAQ;AAAA,MACR,SAAS,CAAC;AAAA,MACV,SAAS,KAAK;AAAA,MACd,OAAO;AAAA,MACP,iBAAiB;AAAA,MACjB,cAAc;AAAA;AAAA;AAAA;AAAA,MAId,gBAAgB,cAAc;AAC5B,YAAI,iBAAiB,CAAC;AACtB,YAAI;AACF,2BAAiB,KAAK,MAAM,YAAY;AAAA,QAC1C,SAAS,KAAK;AACZ,eAAK,IAAI,GAAG;AAAA,QACd;AACA,eAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,iBAAiB,GAAG,UAAU;AAC5B,YAAI,QAAQ,IAAI,MAAM,cAAc;AACpC,YAAI,uBAAe,QAAQ,GAAG;AAC5B,kBAAQ,IAAI,qBAAa,OAAO,QAAQ;AAAA,QAC1C;AACA,eAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,eAAe,QAAQ;AACrB,eAAO,UAAU,OAAO,SAAS;AAAA,MACnC;AAAA,IACF;AACA,SAAK,OAAO;AAAA,MACV,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AACA,SAAK,SAAS;AAGd,QAAI,4BAA4B,KAAK,MAAM;AACzC,WAAK,WAAW,KAAK,KAAK,wBAAwB;AAAA,IACpD,OAAO;AACL,WAAK,WAAW,IAAI,iBAAiB,KAAK,KAAK,KAAK;AAAA,IACtD;AACA,QAAI,KAAK,KAAK,UAAU,CAAC,KAAK,KAAK,UAAU;AAC3C,YAAM,IAAI,MAAM,6DAA6D;AAAA,IAC/E;AACA,SAAK,SAAS,OAAO,SAAS,MAAM,uBAAuB,UAAa,gBAAgB,KAAK,MAAM;AACjG,YAAM,IAAI,MAAM,kEAAkE;AAAA,IACpF;AACA,SAAK,iBAAiB,uBAAO,OAAO,IAAI;AACxC,SAAK,2BAA2B,KAAK,SAAS,oBAAoBA,6BAA4B,MAAM,mBAAmB,EAAE,mBAAmB,GAAG;AAAA,MAC7I,UAAU;AAAA,IACZ,CAAC,CAAC;AAAA,EACJ;AAAA,EACA,WAAW,MAAM;AACf,UAAM,YAAY,KAAK,KAAK,SAAS,EAAE;AACvC,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,KAAK;AACT,UAAM,OAAO;AAAA,MACX,GAAG,KAAK;AAAA,MACR,GAAI,aAAa,CAAC;AAAA,MAClB,GAAI,KAAK,aAAa,CAAC;AAAA,MACvB,SAAS,CAAC;AAAA,IACZ;AAOA,QAAI,OAAO,YAAY,YAAY;AACjC,WAAK,UAAU,QAAQ,IAAI;AAAA,IAC7B,OAAO;AACL,aAAO,OAAO,KAAK,SAAS,KAAK,KAAK,OAAO;AAAA,IAC/C;AACA,QAAI,WAAW;AACb,aAAO,OAAO,KAAK,SAAS,UAAU,OAAO;AAAA,IAC/C;AACA,QAAI,KAAK,WAAW;AAClB,aAAO,OAAO,KAAK,SAAS,KAAK,UAAU,OAAO;AAAA,IACpD;AACA,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,YAAY,UAAU,MAAM,MAAM;AAChC,UAAM,oBAAoB,MAAM,QAAQ,KAAK,iBAAiB,IAAI,KAAK,oBAAoB,OAAO,KAAK,IAAI;AAE3G,sBAAkB,QAAQ,UAAQ;AAChC,UAAI,MAAM,QAAQ,KAAK,IAAI,CAAC,GAAG;AAG7B,aAAK,IAAI,EAAE,QAAQ,aAAW,SAAS,OAAO,MAAM,OAAO,CAAC;AAAA,MAC9D,OAAO;AACL,iBAAS,OAAO,MAAM,KAAK,IAAI,CAAC;AAAA,MAClC;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,qBAAqB,MAAM,MAAM;AAC/B,UAAM,WAAW,IAAI,SAAS;AAC9B,SAAK,YAAY,UAAU,KAAK,MAAM,IAAI;AAC1C,UAAM,sBAAsB,cAAc,IAAI;AAC9C,QAAI,KAAK,MAAM;AACb,eAAS,OAAO,KAAK,WAAW,qBAAqB,KAAK,KAAK,IAAI;AAAA,IACrE,OAAO;AACL,eAAS,OAAO,KAAK,WAAW,mBAAmB;AAAA,IACrD;AACA,WAAO;AAAA,EACT;AAAA,EACA,oBAAoB,OAAO,MAAM;AAC/B,UAAM,WAAW,IAAI,SAAS;AAC9B,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,KAAK,KAAK,SAAS;AACvB,SAAK,YAAY,UAAU,MAAM,IAAI;AACrC,UAAM,QAAQ,UAAQ;AACpB,YAAM,UAAU,KAAK,WAAW,IAAI;AACpC,YAAM,sBAAsB,cAAc,IAAI;AAC9C,UAAI,KAAK,MAAM;AACb,iBAAS,OAAO,QAAQ,WAAW,qBAAqB,KAAK,IAAI;AAAA,MACnE,OAAO;AACL,iBAAS,OAAO,QAAQ,WAAW,mBAAmB;AAAA,MACxD;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,MAAM,sBAAsB,MAAM;AAChC,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAM,OAAO,KAAK,WAAW,IAAI;AACjC,YAAM,QAAQ,KAAK;AACnB,YAAM,OAAO,cAAc,KAAK,OAAO,YAAY;AACnD,UAAI;AACJ,YAAM,eAAe,MAAM;AACzB,YAAI,UAAU;AAAM;AACpB,iBAAS,IAAI,WAAO;AAAA,UAClB,QAAQ,GAAG,IAAI,QAAQ,KAAK;AAAA,QAC9B,CAAC;AACD,eAAO,GAAG,YAAY,kBAAgB,2BAAmB,MAAM,cAAc,IAAI,CAAC;AAClF,eAAO,GAAG,WAAW,UAAQ;AAC3B,gBAAM,OAAO,KAAK,gBAAgB,KAAK,SAAS,cAAc,KAAK,QAAQ;AAC3E,gBAAM,YAAY,KAAK,KAAK,oBAAoB;AAChD,gBAAM,aAAa;AAAA,YACjB,QAAQ,KAAK,SAAS;AAAA,YACtB;AAAA,YACA;AAAA,UACF;AACA,eAAK,KAAK,KAAK,kBAAkB,MAAM,UAAU;AACjD,wBAAc,KAAK;AACnB,iBAAO,MAAM;AACb,cAAI,KAAK,eAAe,KAAK,EAAE,GAAG;AAChC,iBAAK,eAAe,KAAK,EAAE,EAAE,OAAO;AACpC,iBAAK,eAAe,KAAK,EAAE,IAAI;AAAA,UACjC;AACA,iBAAO,QAAQ;AAAA,QACjB,CAAC;AACD,eAAO,GAAG,SAAS,aAAW;AAC5B,gBAAM,OAAO,QAAQ;AACrB,gBAAM,QAAQ,OAAO,KAAK,iBAAiB,KAAK,cAAc,IAAI,IAAI,OAAO,OAAO,IAAI,MAAM,QAAQ,MAAM,OAAO,GAAG;AAAA,YACpH,OAAO,QAAQ;AAAA,UACjB,CAAC;AACD,eAAK,KAAK,KAAK,gBAAgB,MAAM,KAAK;AAC1C,wBAAc,KAAK;AACnB,iBAAO,MAAM;AACb,cAAI,KAAK,eAAe,KAAK,EAAE,GAAG;AAChC,iBAAK,eAAe,KAAK,EAAE,EAAE,OAAO;AACpC,iBAAK,eAAe,KAAK,EAAE,IAAI;AAAA,UACjC;AACA,iBAAO,KAAK;AAAA,QACd,CAAC;AAAA,MACH;AACA,WAAK,eAAe,KAAK,EAAE,IAAI,IAAI,aAAa,KAAK,IAAI;AACzD,UAAI,gBAAgB,KAAK,SAAS,IAAI,MAAM;AAC1C,YAAI,KAAK,UAAU;AACjB,cAAI;AACJ,WAAC,UAAU,WAAW,OAAO,SAAS,QAAQ,KAAK,SAAS,CAAC,CAAC;AAAA,QAChE,OAAO;AACL,uBAAa;AAAA,QACf;AACA,eAAO,MAAM;AAAA,QAAC;AAAA,MAChB,CAAC;AACD,WAAK,aAAa,KAAK,IAAI,MAAM;AAC/B,YAAI;AACJ,SAAC,WAAW,WAAW,OAAO,SAAS,SAAS,KAAK,UAAU,CAAC,CAAC;AACjE,eAAO,MAAM;AACb,sBAAc,MAAM;AACpB,gBAAQ,UAAU,KAAK,EAAE,cAAc;AAAA,MACzC,CAAC;AACD,WAAK,YAAY,KAAK,IAAI,SAAU,OAAO;AACzC,YAAI;AAAA,UACF;AAAA,QACF,IAAI,UAAU,SAAS,CAAC,IAAI;AAC5B,YAAI,WAAW,QAAQ;AACrB,cAAI;AACJ,WAAC,WAAW,WAAW,OAAO,SAAS,SAAS,KAAK,UAAU,CAAC,CAAC;AACjE,wBAAc,MAAM;AAAA,QAEtB;AAEA,gBAAQ,UAAU,KAAK,EAAE,eAAe;AAAA,MAC1C,CAAC;AACD,YAAM,iBAAiB,MAAM;AAC3B,YAAI,UAAU,MAAM;AAClB,wBAAc,MAAM;AAAA,QACtB,OAAO;AACL,wBAAc,KAAK;AAAA,QACrB;AACA,wBAAgB,KAAK,SAAS,IAAI,MAAM;AACtC,cAAI,UAAU,MAAM;AAClB,yBAAa;AAAA,UACf;AACA,iBAAO,MAAM;AAAA,UAAC;AAAA,QAChB,CAAC;AAAA,MACH;AACA,WAAK,QAAQ,KAAK,IAAI,cAAc;AACpC,WAAK,WAAW,KAAK,IAAI,cAAc;AAAA,IACzC,CAAC,EAAE,MAAM,SAAO;AACd,WAAK,KAAK,KAAK,gBAAgB,MAAM,GAAG;AACxC,aAAO,QAAQ,OAAO,GAAG;AAAA,IAC3B,CAAC;AAAA,EACH;AAAA,EACA,aAAa,QAAQ,IAAI;AACvB,SAAK,eAAe,MAAM,EAAE,GAAG,gBAAgB,UAAQ;AACrD,UAAI,WAAW,KAAK;AAAI,WAAG,KAAK,EAAE;AAAA,IACpC,CAAC;AAAA,EACH;AAAA,EACA,QAAQ,QAAQ,IAAI;AAClB,SAAK,eAAe,MAAM,EAAE,GAAG,gBAAgB,kBAAgB;AAC7D,UAAI,WAAW,cAAc;AAC3B,WAAG;AAAA,MACL;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,WAAW,QAAQ,IAAI;AACrB,SAAK,eAAe,MAAM,EAAE,GAAG,aAAa,MAAM;AAChD,UAAI,CAAC,KAAK,KAAK,QAAQ,MAAM;AAAG;AAChC,SAAG;AAAA,IACL,CAAC;AAAA,EACH;AAAA,EACA,YAAY,QAAQ,cAAc;AAChC,QAAI,QAAQ;AACZ,SAAK,eAAe,MAAM,EAAE,GAAG,cAAc,WAAY;AACvD,UAAI,CAAC,MAAM,KAAK,QAAQ,MAAM;AAAG;AACjC,mBAAa,GAAG,SAAS;AAAA,IAC3B,CAAC;AAAA,EACH;AAAA,EACA,UAAU;AACR,QAAI,KAAK,KAAK,QAAQ;AACpB,YAAM;AAAA,QACJ;AAAA,MACF,IAAI,KAAK,KAAK,SAAS;AACvB,WAAK,KAAK,SAAS;AAAA,QACjB,cAAc;AAAA,UACZ,GAAG;AAAA,UACH,wBAAwB;AAAA,QAC1B;AAAA,MACF,CAAC;AAAA,IACH;AACA,SAAK,KAAK,YAAYA,6BAA4B,MAAM,aAAa,EAAE,aAAa,CAAC;AAAA,EACvF;AAAA,EACA,YAAY;AACV,QAAI,KAAK,KAAK,QAAQ;AACpB,YAAM;AAAA,QACJ;AAAA,MACF,IAAI,KAAK,KAAK,SAAS;AACvB,WAAK,KAAK,SAAS;AAAA,QACjB,cAAc;AAAA,UACZ,GAAG;AAAA,UACH,wBAAwB;AAAA,QAC1B;AAAA,MACF,CAAC;AAAA,IACH;AACA,SAAK,KAAK,eAAeA,6BAA4B,MAAM,aAAa,EAAE,aAAa,CAAC;AAAA,EAC1F;AACF;AACA,eAAe,SAAS,MAAM,SAAS,OAAO;AAC5C,QAAM,OAAO,KAAK,WAAW,IAAI;AACjC,OAAK,KAAK,IAAI,aAAa,OAAO,OAAO,KAAK,EAAE;AAChD,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAM,OAAO,KAAK,WAAW,KAAK,qBAAqB,MAAM,IAAI,IAAI,KAAK;AAC1E,UAAM,MAAM,IAAI,eAAe;AAC/B,SAAK,eAAe,KAAK,EAAE,IAAI,IAAI,aAAa,KAAK,IAAI;AACzD,QAAI;AACJ,UAAM,QAAQ,IAAI,wBAAgB,KAAK,SAAS,MAAM;AACpD,YAAM,QAAQ,IAAI,MAAM,KAAK,KAAK,iBAAiB;AAAA,QACjD,SAAS,KAAK,KAAK,KAAK,UAAU,GAAI;AAAA,MACxC,CAAC,CAAC;AACF,WAAK,KAAK,KAAK,kBAAkB,OAAO,CAAC,IAAI,CAAC;AAAA,IAChD,CAAC;AACD,UAAMC,MAAK,OAAO;AAClB,QAAI,OAAO,iBAAiB,aAAa,MAAM;AAC7C,WAAK,KAAK,IAAI,eAAeA,GAAE,UAAU;AAAA,IAC3C,CAAC;AACD,QAAI,OAAO,iBAAiB,YAAY,QAAM;AAC5C,WAAK,KAAK,IAAI,eAAeA,GAAE,cAAc,GAAG,MAAM,MAAM,GAAG,KAAK,EAAE;AAGtE,YAAM,SAAS;AACf,UAAI,GAAG,kBAAkB;AACvB,aAAK,KAAK,KAAK,mBAAmB,MAAM;AAAA,UACtC,UAAU;AAAA,UACV,eAAe,GAAG;AAAA,UAClB,YAAY,GAAG;AAAA,QACjB,CAAC;AAAA,MACH;AAAA,IACF,CAAC;AACD,QAAI,iBAAiB,QAAQ,MAAM;AACjC,WAAK,KAAK,IAAI,eAAeA,GAAE,WAAW;AAC1C,YAAM,KAAK;AACX,oBAAc,KAAK;AACnB,UAAI,KAAK,eAAe,KAAK,EAAE,GAAG;AAChC,aAAK,eAAe,KAAK,EAAE,EAAE,OAAO;AACpC,aAAK,eAAe,KAAK,EAAE,IAAI;AAAA,MACjC;AACA,UAAI,KAAK,eAAe,IAAI,QAAQ,IAAI,cAAc,GAAG,GAAG;AAC1D,cAAME,QAAO,KAAK,gBAAgB,IAAI,cAAc,GAAG;AACvD,cAAM,YAAYA,MAAK,KAAK,oBAAoB;AAChD,cAAM,aAAa;AAAA,UACjB,QAAQ,IAAI;AAAA,UACZ,MAAAA;AAAA,UACA;AAAA,QACF;AACA,aAAK,KAAK,KAAK,kBAAkB,MAAM,UAAU;AACjD,YAAI,WAAW;AACb,eAAK,KAAK,IAAI,YAAY,KAAK,IAAI,SAAS,SAAS,EAAE;AAAA,QACzD;AACA,eAAO,QAAQ,IAAI;AAAA,MACrB;AACA,YAAM,OAAO,KAAK,gBAAgB,IAAI,cAAc,GAAG;AACvD,YAAM,QAAQ,mBAAmB,KAAK,KAAK,iBAAiB,IAAI,cAAc,GAAG,CAAC;AAClF,YAAM,WAAW;AAAA,QACf,QAAQ,IAAI;AAAA,QACZ;AAAA,MACF;AACA,WAAK,KAAK,KAAK,gBAAgB,MAAM,OAAO,QAAQ;AACpD,aAAO,OAAO,KAAK;AAAA,IACrB,CAAC;AACD,QAAI,iBAAiB,SAAS,MAAM;AAClC,WAAK,KAAK,IAAI,eAAeF,GAAE,UAAU;AACzC,YAAM,KAAK;AACX,oBAAc,KAAK;AACnB,UAAI,KAAK,eAAe,KAAK,EAAE,GAAG;AAChC,aAAK,eAAe,KAAK,EAAE,EAAE,OAAO;AACpC,aAAK,eAAe,KAAK,EAAE,IAAI;AAAA,MACjC;AACA,YAAM,QAAQ,mBAAmB,KAAK,KAAK,iBAAiB,IAAI,cAAc,GAAG,CAAC;AAClF,WAAK,KAAK,KAAK,gBAAgB,MAAM,KAAK;AAC1C,aAAO,OAAO,KAAK;AAAA,IACrB,CAAC;AACD,QAAI,KAAK,KAAK,OAAO,YAAY,GAAG,KAAK,UAAU,IAAI;AAGvD,QAAI,kBAAkB,KAAK;AAC3B,QAAI,KAAK,iBAAiB,IAAI;AAC5B,UAAI,eAAe,KAAK;AAAA,IAC1B;AACA,oBAAgB,KAAK,SAAS,IAAI,MAAM;AAKtC,YAAM,cAAc,KAAK,WAAW,IAAI;AACxC,aAAO,KAAK,YAAY,OAAO,EAAE,QAAQ,YAAU;AACjD,YAAI,iBAAiB,QAAQ,YAAY,QAAQ,MAAM,CAAC;AAAA,MAC1D,CAAC;AACD,UAAI,KAAK,IAAI;AACb,aAAO,MAAM;AACX,cAAM,KAAK;AACX,YAAI,MAAM;AAAA,MACZ;AAAA,IACF,CAAC;AACD,SAAK,aAAa,KAAK,IAAI,MAAM;AAC/B,oBAAc,MAAM;AACpB,aAAO,IAAI,MAAM,cAAc,CAAC;AAAA,IAClC,CAAC;AACD,SAAK,YAAY,KAAK,IAAI,UAAQ;AAChC,UAAI;AAAA,QACF;AAAA,MACF,IAAI;AACJ,UAAI,WAAW,QAAQ;AACrB,sBAAc,MAAM;AAAA,MACtB;AACA,aAAO,IAAI,MAAM,kBAAkB,CAAC;AAAA,IACtC,CAAC;AAAA,EACH,CAAC;AACH;AACA,SAAS,eAAe,OAAO;AAC7B,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,KAAK;AACT,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,KAAK;AACT,UAAM,gBAAgB,KAAK,KAAK,SAAS,EAAE;AAC3C,UAAM,WAAW,KAAK,oBAAoB,OAAO;AAAA,MAC/C,GAAG,KAAK;AAAA,MACR,GAAI,iBAAiB,CAAC;AAAA,IACxB,CAAC;AACD,UAAM,MAAM,IAAI,eAAe;AAC/B,UAAM,YAAY,WAAS;AACzB,YAAM,QAAQ,UAAQ;AACpB,aAAK,KAAK,KAAK,gBAAgB,MAAM,KAAK;AAAA,MAC5C,CAAC;AAAA,IACH;AACA,UAAM,QAAQ,IAAI,wBAAgB,KAAK,KAAK,SAAS,MAAM;AACzD,YAAM,QAAQ,IAAI,MAAM,KAAK,KAAK,iBAAiB;AAAA,QACjD,SAAS,KAAK,KAAK,KAAK,KAAK,UAAU,GAAI;AAAA,MAC7C,CAAC,CAAC;AACF,WAAK,KAAK,KAAK,kBAAkB,OAAO,KAAK;AAAA,IAC/C,CAAC;AACD,QAAI,OAAO,iBAAiB,aAAa,MAAM;AAC7C,WAAK,KAAK,IAAI,sCAAsC;AACpD,YAAM,SAAS;AAAA,IACjB,CAAC;AACD,QAAI,OAAO,iBAAiB,YAAY,QAAM;AAC5C,YAAM,SAAS;AACf,UAAI,CAAC,GAAG;AAAkB;AAC1B,YAAM,QAAQ,UAAQ;AACpB,aAAK,KAAK,KAAK,mBAAmB,MAAM;AAAA,UACtC,UAAU;AAAA,UACV,eAAe,GAAG,SAAS,GAAG,QAAQ,KAAK;AAAA,UAC3C,YAAY,KAAK;AAAA,QACnB,CAAC;AAAA,MACH,CAAC;AAAA,IACH,CAAC;AACD,QAAI,iBAAiB,QAAQ,QAAM;AACjC,YAAM,KAAK;AACX,UAAI,KAAK,KAAK,eAAe,GAAG,OAAO,QAAQ,IAAI,cAAc,GAAG,GAAG;AACrE,cAAM,OAAO,KAAK,KAAK,gBAAgB,IAAI,cAAc,GAAG;AAC5D,cAAM,aAAa;AAAA,UACjB,QAAQ,GAAG,OAAO;AAAA,UAClB;AAAA,QACF;AACA,cAAM,QAAQ,UAAQ;AACpB,eAAK,KAAK,KAAK,kBAAkB,MAAM,UAAU;AAAA,QACnD,CAAC;AACD,eAAO,QAAQ;AAAA,MACjB;AACA,YAAM,QAAQ,KAAK,KAAK,iBAAiB,IAAI,cAAc,GAAG,KAAK,IAAI,MAAM,cAAc;AAC3F,YAAM,UAAU;AAChB,gBAAU,KAAK;AACf,aAAO,OAAO,KAAK;AAAA,IACrB,CAAC;AACD,QAAI,iBAAiB,SAAS,MAAM;AAClC,YAAM,KAAK;AACX,YAAM,QAAQ,KAAK,KAAK,iBAAiB,IAAI,cAAc,GAAG,KAAK,IAAI,MAAM,cAAc;AAC3F,gBAAU,KAAK;AACf,aAAO,OAAO,KAAK;AAAA,IACrB,CAAC;AACD,SAAK,KAAK,GAAG,cAAc,SAAU,QAAQ;AAC3C,UAAI;AAAA,QACF;AAAA,MACF,IAAI,WAAW,SAAS,CAAC,IAAI;AAC7B,UAAI,WAAW;AAAQ;AACvB,YAAM,KAAK;AACX,UAAI,MAAM;AAAA,IACZ,CAAC;AACD,QAAI,KAAK,OAAO,YAAY,GAAG,UAAU,IAAI;AAG7C,QAAI,kBAAkB,KAAK,KAAK;AAChC,QAAI,KAAK,KAAK,iBAAiB,IAAI;AACjC,UAAI,eAAe,KAAK,KAAK;AAAA,IAC/B;AACA,WAAO,KAAK,KAAK,KAAK,OAAO,EAAE,QAAQ,YAAU;AAC/C,UAAI,iBAAiB,QAAQ,KAAK,KAAK,QAAQ,MAAM,CAAC;AAAA,IACxD,CAAC;AACD,QAAI,KAAK,QAAQ;AAAA,EACnB,CAAC;AACH;AACA,eAAe,cAAc,OAAO;AAClC,QAAM,QAAQ,WAAW,MAAM,IAAI,CAAC,MAAM,MAAM;AAC9C,UAAM,UAAU,SAAS,GAAG,EAAE,IAAI;AAClC,UAAM,QAAQ,MAAM;AACpB,QAAI,KAAK,UAAU;AACjB,YAAM,aAAa,IAAI,gBAAgB;AACvC,YAAM,iBAAiB,iBAAe;AACpC,YAAI,YAAY,OAAO,KAAK;AAAI,qBAAW,MAAM;AAAA,MACnD;AACA,WAAK,KAAK,GAAG,gBAAgB,cAAc;AAC3C,YAAM,gBAAgB,KAAK,iBAAiB,MAAM;AAAA,QAChD,QAAQ,WAAW;AAAA,MACrB,CAAC;AACD,WAAK,SAAS,iBAAiB,MAAM;AACnC,aAAK,KAAK,IAAI,gBAAgB,cAAc;AAAA,MAC9C,GAAG;AAAA,QACD,UAAU;AAAA,MACZ,CAAC,EAAE;AACH,aAAO;AAAA,IACT;AACA,WAAOD,6BAA4B,MAAM,OAAO,EAAE,OAAO,EAAE,MAAM,SAAS,KAAK;AAAA,EACjF,CAAC,CAAC;AACJ;AAEA,UAAU,UAAU,YAAY;",
  "names": ["_classPrivateFieldLooseBase", "id", "_classPrivateFieldLooseKey", "body"]
}
